{"version":3,"file":"static/js/moviesPage.9363a41b.chunk.js","mappings":"oMAEaA,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEnBC,GAAWC,EAAAA,EAAAA,MAEjB,OACI,0BACI,wBACKF,GAAUA,EAAOG,KAAI,SAAAC,GAAK,OACvB,yBACI,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMP,GAAhD,SAA6DG,EAAMK,SAD9DL,EAAME,a,2HCN7BI,EAAgB,CAClBC,MAAO,IAGEC,EAAa,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAWxB,OACI,SAAC,KAAD,CACIH,cAAeA,EACfG,SAZa,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACA,KAAxBD,EAAOH,MAAMK,QAIjBH,EAASC,EAAOH,OAChBI,MAJIE,EAAAA,EAAAA,IAAM,4BAQV,UAGI,UAAC,KAAD,CACIC,aAAa,MADjB,WAEI,SAAC,KAAD,CACIC,KAAK,OACLC,KAAK,WAET,mBACID,KAAK,SADT,0B,iBCpBD,SAASE,IAEpB,OAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOtB,EAAP,KAAeyB,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAsBF,EAAaG,IAAI,UAG7CC,EAAAA,EAAAA,YAAU,WACc,KAAhBR,GAIJS,EAAAA,GAAsBT,GACjBU,MAAK,SAAAC,GACGA,EAASC,QAAQC,QAClBnB,EAAAA,GAAAA,MAAA,gCAAqCM,EAArC,MAEJE,EAAUS,EAASC,cAE5B,CAACZ,KAGJQ,EAAAA,EAAAA,YAAU,WACNF,GACFL,EAAeK,KAEd,CAACA,IAUJ,OACI,iCACI,SAACjB,EAAD,CAAYC,SATC,SAACwB,GAClBb,EAAea,GACfZ,EAAU,IACVG,EAAgB,CAAEjB,MAAO0B,QAOrB,SAACtC,EAAA,EAAD,CAAYC,OAAQA,S,4MCjD1BsC,EAAW,gCACXC,EAAU,mCAEHC,EAAa,kCAAnB,SAEQC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,GAAzD,SAC2BC,MAAMF,EAAKC,GADtC,YACUT,EADV,QAEoBW,GAFpB,iCAGgBX,EAASY,OAHzB,gDAIUC,QAAQC,OAAO,IAAIC,MAAM,cAJnC,2GAQO,SAASC,IACZ,OAAOT,EAAuB,GAAD,OACtBH,EADsB,sCACgBC,IAI1C,SAASY,EAAkBxC,GAC9B,OAAO8B,EAAuB,GAAD,OACtBH,EADsB,gCACUC,EADV,iCAC0C5B,EAD1C,gCAK1B,SAASyC,EAAkBC,GAC9B,OAAOZ,EAAuB,GAAD,OACtBH,EADsB,iBACLe,EADK,oBACcd,EADd,oBAK1B,SAASe,EAAeD,GAC3B,OAAOZ,EAAuB,GAAD,OACtBH,EADsB,iBACLe,EADK,4BACsBd,EADtB,oBAK1B,SAASgB,EAAkBF,GAC9B,OAAOZ,EAAuB,GAAD,OACtBH,EADsB,iBACLe,EADK,4BACsBd,EADtB","sources":["components/MoviesList/MoviesList.jsx","components/SearchForm/SearchForm.jsx","pages/MoviesPage/MoviesPage.jsx","services/themoviedb-api.js"],"sourcesContent":["import { Link, useLocation } from \"react-router-dom\";\n\nexport const MoviesList = ({ movies }) => {\n    \n    const location = useLocation();\n    \n    return (\n        <div>\n            <ul>\n                {movies && movies.map(movie =>\n                    <li key={movie.id}>\n                        <Link to={`/movies/${movie.id}`} state={{ from: location }}>{movie.title}</Link>\n                    </li>\n                )}\n            </ul>\n        </div>\n    )\n}","import { Formik, Form, Field } from \"formik\";\nimport { toast } from \"react-hot-toast\";\n\n\nconst initialValues = {\n    query: '',\n};\n\nexport const SearchForm = ({onSubmit}) => {\n    \n    const handleSubmit = (values, { resetForm }) => {\n        if (values.query.trim() === '') {\n            toast('Enter name of the movie');\n            return;\n        }\n        onSubmit(values.query);\n        resetForm();\n    }\n\n    return (\n        <Formik\n            initialValues={initialValues}\n            onSubmit={handleSubmit}>\n            <Form\n                autoComplete=\"off\">\n                <Field\n                    type=\"text\"\n                    name=\"query\"\n                />\n                <button\n                    type=\"submit\">Search</button>\n            </Form>\n        </Formik>\n    )\n}","import { useState, useEffect } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { toast } from \"react-hot-toast\";\nimport { SearchForm } from \"components/SearchForm/SearchForm.jsx\";\nimport { MoviesList } from \"components/MoviesList/MoviesList.jsx\";\nimport * as API from \"services/themoviedb-api.js\";\n\n\n\nexport default function MoviesPage() {\n \n    const [searchQuery, setSearchQuery] = useState(\"\");\n    const [movies, setMovies] = useState([]);\n    const [searchParams, setSearchParams] = useSearchParams();\n    const currentSearchParams = searchParams.get('query');\n    \n    \n    useEffect(() => {\n        if (searchQuery === '') {\n            return;\n        }\n\n        API.fetchSearchMovies(searchQuery)\n            .then(response => {\n                if (!response.results.length) {\n                    toast.error(`No information about \"${searchQuery}\"`)\n                }\n                setMovies(response.results)\n            });\n    }, [searchQuery]);\n\n\n    useEffect(() => {\n    if (currentSearchParams) {\n      setSearchQuery(currentSearchParams);\n    }\n    }, [currentSearchParams]);\n    \n\n    const onFormSubmit = (value) => {\n        setSearchQuery(value);\n        setMovies([]);\n        setSearchParams({ query: value });\n    };\n\n\n    return (\n        <>\n            <SearchForm onSubmit={onFormSubmit} />\n            <MoviesList movies={movies}/>  \n        </>\n    )\n}\n\n","const BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '1a4768bd62313a9ba272b58353515c76';\n\nexport const POSTER_URL = 'https://image.tmdb.org/t/p/w500';\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n    const response = await fetch(url, config);\n    return response.ok\n        ? await response.json()\n        : Promise.reject(new Error('Not Found'));\n};\n\n\nexport function fetchTrendingMovies() {\n    return fetchWithErrorHandling(\n        `${BASE_URL}trending/movie/day?api_key=${API_KEY}`\n    )\n};\n\nexport function fetchSearchMovies(query) {\n    return fetchWithErrorHandling(\n        `${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n    )\n};\n\nexport function fetchMovieDetails(movieId) {\n    return fetchWithErrorHandling(\n        `${BASE_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    )\n};\n\nexport function fetchMovieCast(movieId) {\n    return fetchWithErrorHandling(\n        `${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    )\n};\n\nexport function fetchMovieReviews(movieId) {\n    return fetchWithErrorHandling(\n        `${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    )\n};"],"names":["MoviesList","movies","location","useLocation","map","movie","to","id","state","from","title","initialValues","query","SearchForm","onSubmit","values","resetForm","trim","toast","autoComplete","type","name","MoviesPage","useState","searchQuery","setSearchQuery","setMovies","useSearchParams","searchParams","setSearchParams","currentSearchParams","get","useEffect","API","then","response","results","length","value","BASE_URL","API_KEY","POSTER_URL","fetchWithErrorHandling","url","config","fetch","ok","json","Promise","reject","Error","fetchTrendingMovies","fetchSearchMovies","fetchMovieDetails","movieId","fetchMovieCast","fetchMovieReviews"],"sourceRoot":""}